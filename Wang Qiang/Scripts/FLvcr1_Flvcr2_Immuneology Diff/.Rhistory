)
rownames(col_annot) <- colnames(mat_t)
# Colors
ct_levels  <- unique(CancerType)
ct_palette <- setNames(RColorBrewer::brewer.pal(max(3, length(ct_levels)), "Set2")[seq_along(ct_levels)], ct_levels)
ann_colors_rows <- list(
CancerType = ct_palette,
SignFlip   = c(Opposite = "#d95f02", Same = "#1b9e77")
)
ann_colors_cols <- list(
Variable = c(FLVCR1 = "#4575b4", FLVCR2 = "#d73027")
)
# Row gaps to separate the 3 cohorts (use your existing block_sizes order)
gaps_row <- cumsum(block_sizes); gaps_row <- gaps_row[-length(gaps_row)]
# Labels: show clean gene symbols (no cohort tag)
labels_row <- display_labels
# Palette & breaks
pal    <- colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(101)
breaks <- seq(-1, 1, length.out = 101)
# ---- Plot (tall rows so names are readable) ----
png("FLVCR1_FLVCR2_GenesAsRows.png", width = 1800, height = 3000, res = 250)
pheatmap(
mat_t,
cluster_rows = FALSE,          # keep the within-block ordering we already computed
cluster_cols = FALSE,          # only two columns
gaps_row = gaps_row,           # big blocks by cohort
color = pal, breaks = breaks,
border_color = NA,
main = "Spearman correlations: Genes (rows) vs FLVCR1/FLVCR2 (cols)",
annotation_row = row_annot,
annotation_col = col_annot,
annotation_colors = c(ann_colors_rows, ann_colors_cols),
show_rownames = TRUE,
labels_row = labels_row,
fontsize_row = 10,             # tweak if you want bigger text
cellheight = 14,               # increase for more spacing between gene rows
fontsize_col = 14
)
dev.off()
# Vector PDF version
pdf("FLVCR1_FLVCR2_GenesAsRows.pdf", width = 8, height = 14)
pheatmap(
mat_t,
cluster_rows = FALSE,
cluster_cols = FALSE,
gaps_row = gaps_row,
color = pal, breaks = breaks,
border_color = NA,
main = "Spearman correlations: Genes (rows) vs FLVCR1/FLVCR2 (cols)",
annotation_row = row_annot,
annotation_col = col_annot,
annotation_colors = c(ann_colors_rows, ann_colors_cols),
show_rownames = TRUE,
labels_row = labels_row,
fontsize_row = 9,
cellheight = 12,
fontsize_col = 12
)
dev.off()
# install.packages(c("readxl","dplyr","stringr","pheatmap","RColorBrewer")) # if needed
library(readxl)
library(dplyr)
library(stringr)
library(pheatmap)
library(RColorBrewer)
path <- "~/Desktop/Guo's lab/Wang Qiang/Raw_Data/Flvcr1 and Flvcr2.xlsx"   # adjust to absolute path if needed
raw  <- read_excel(path, sheet = 1, col_names = FALSE)
to_num <- function(x) suppressWarnings(as.numeric(x))
# ---- 1) Find cohort title rows (contain TCGA/GDC labels) ----
is_cohort_row <- apply(raw, 1, function(r) any(stringr::str_detect(as.character(r), "(TCGA|GDC)"), na.rm = TRUE))
cohort_idx <- which(is_cohort_row)
get_title <- function(i){
row <- as.character(unlist(raw[i, ]))
row <- row[!is.na(row) & trimws(row) != ""]
if (length(row) == 0) "Unknown" else row[1]
}
titles <- sapply(cohort_idx, get_title)
blocks <- data.frame(
start = cohort_idx,
end   = c(cohort_idx[-1] - 1, nrow(raw)),
title = titles,
stringsAsFactors = FALSE
)
# ---- 2) Keep the 3 cohorts of interest ----
want_patterns <- c("GBM", "Pancreatic", "Ovarian")  # edit to swap cohorts
blocks$keep <- sapply(blocks$title, function(tt) any(str_detect(tt, str_c(want_patterns, collapse = "|"))))
blocks_sel <- blocks %>% filter(keep)
if (nrow(blocks_sel) == 0) stop("No matching cohorts found. Check 'want_patterns' or Excel contents.")
# ---- 3) Parse one cohort block into (gene, FLVCR1, FLVCR2) table ----
parse_block <- function(raw, start_idx, end_idx) {
hdr_row <- NA_integer_
for (i in seq(start_idx, end_idx)) {
rowv <- as.character(unlist(raw[i, ]))
if (any(rowv == "FLVCR1", na.rm = TRUE) && any(rowv == "FLVCR2", na.rm = TRUE)) {
hdr_row <- i; break
}
}
if (is.na(hdr_row)) return(NULL)
row_hdr <- as.character(unlist(raw[hdr_row, ]))
spearman_cols <- which(row_hdr == "Spearman's correlation")
if (length(spearman_cols) < 2) return(NULL)
gene_cols <- spearman_cols - 1
data_rows <- seq(hdr_row + 1, end_idx)
left  <- raw[data_rows, c(gene_cols[1], spearman_cols[1])]
right <- raw[data_rows, c(gene_cols[2], spearman_cols[2])]
names(left)  <- c("gene",  "FLVCR1")
names(right) <- c("gene2", "FLVCR2")
left <- left %>%
mutate(gene = trimws(as.character(gene)),
FLVCR1 = to_num(FLVCR1)) %>%
filter(!is.na(gene), gene != "", !is.na(FLVCR1))
right <- right %>%
mutate(gene2 = trimws(as.character(gene2)),
FLVCR2 = to_num(FLVCR2)) %>%
filter(!is.na(gene2), gene2 != "", !is.na(FLVCR2))
# collapse duplicates within the cohort (mean)
left_c  <- left  %>% group_by(gene)  %>% summarise(FLVCR1 = mean(FLVCR1, na.rm = TRUE), .groups = "drop")
right_c <- right %>% group_by(gene2) %>% summarise(FLVCR2 = mean(FLVCR2, na.rm = TRUE), .groups = "drop")
dat <- full_join(left_c, right_c, by = c("gene" = "gene2")) %>%
filter(!(is.na(FLVCR1) & is.na(FLVCR2))) %>%
distinct(gene, .keep_all = TRUE)
dat
}
# ---- 4) Parse selected cohorts ----
cohort_tables <- list()
cohort_labels <- c()
for (k in seq_len(nrow(blocks_sel))) {
b <- blocks_sel[k, ]
tab <- parse_block(raw, b$start, b$end)
if (!is.null(tab) && nrow(tab) > 0) {
cohort_tables[[length(cohort_tables) + 1]] <- tab
cohort_labels <- c(cohort_labels, b$title)
}
}
if (length(cohort_tables) == 0) stop("Matched cohorts exist but parsing failed.")
# ---- 5) Within-block column ordering (cluster each block's genes) ----
order_block <- function(tab) {
m <- rbind(FLVCR1 = tab$FLVCR1, FLVCR2 = tab$FLVCR2)
colnames(m) <- tab$gene
d  <- dist(t(m))
hc <- hclust(d, method = "average")
ord <- hc$order
list(mat = m[, ord, drop = FALSE], ord = ord)
}
block_mats <- lapply(cohort_tables, order_block)
# ---- 6) Make colnames unique by appending cohort tags; store clean labels ----
tags <- sapply(cohort_labels, function(t) {
if (grepl("GBM", t, ignore.case = TRUE)) "GBM"
else if (grepl("Pancre", t, ignore.case = TRUE)) "PAAD"
else if (grepl("Ovar", t, ignore.case = TRUE)) "OV"
else gsub("[^A-Za-z0-9]+", "", substr(t, 1, 8))
})
display_labels_list <- vector("list", length(block_mats))
for (i in seq_along(block_mats)) {
genes_i <- colnames(block_mats[[i]]$mat)
display_labels_list[[i]] <- genes_i
colnames(block_mats[[i]]$mat) <- make.unique(paste0(genes_i, "|", tags[i]))
}
display_labels <- unlist(display_labels_list, use.names = FALSE)
# ---- 7) Combine blocks + gaps + annotations (for original orientation) ----
mat_combined <- do.call(cbind, lapply(block_mats, function(x) x$mat))
block_sizes  <- sapply(block_mats, function(x) ncol(x$mat))
gaps         <- cumsum(block_sizes); gaps <- gaps[-length(gaps)]
CancerType <- rep(cohort_labels, times = block_sizes)
sign_flip  <- sign(mat_combined["FLVCR1", ]) != sign(mat_combined["FLVCR2", ])
# ============================
# ---- 8) Flip so GENES ARE ROWS (readable labels) ----
# ============================
mat_t <- t(mat_combined)  # rows = genes (with cohort-tagged IDs), cols = FLVCR1/FLVCR2
# Row annotations (one per gene)
row_annot <- data.frame(
CancerType = CancerType,
SignFlip   = ifelse(sign_flip, "Opposite", "Same"),
row.names  = rownames(mat_t)
)
# Column annotation (only 2 columns)
col_annot <- data.frame(Variable = c("FLVCR1", "FLVCR2"))
rownames(col_annot) <- colnames(mat_t)
# Colors
ct_levels  <- unique(CancerType)
ct_palette <- setNames(brewer.pal(max(3, length(ct_levels)), "Set2")[seq_along(ct_levels)], ct_levels)
ann_colors_rows <- list(
CancerType = ct_palette,
SignFlip   = c(Opposite = "#d95f02", Same = "#1b9e77")
)
ann_colors_cols <- list(
Variable = c(FLVCR1 = "#4575b4", FLVCR2 = "#d73027")
)
# Row gaps to separate the 3 cohorts
gaps_row <- cumsum(block_sizes); if (length(gaps_row) > 1) gaps_row <- gaps_row[-length(gaps_row)] else gaps_row <- NULL
# Show clean gene names (no cohort tag)
labels_row <- display_labels
# Color map
pal    <- colorRampPalette(rev(brewer.pal(11, "RdBu")))(101)
breaks <- seq(-1, 1, length.out = 101)
# PNG: make figure wider
png("FLVCR1_FLVCR2_GenesAsRows.png", width = 3000, height = 3000, res = 250)
pheatmap(
mat_t,
cluster_rows = FALSE,
cluster_cols = FALSE,
gaps_row = gaps_row,
color = pal, breaks = breaks,
border_color = NA,
main = "Spearman correlations: Genes (rows) vs FLVCR1/FLVCR2 (cols)",
annotation_row = row_annot,
annotation_col = col_annot,
annotation_colors = c(ann_colors_rows, ann_colors_cols),
show_rownames = TRUE,
labels_row = labels_row,
fontsize_row = 9,
cellheight = 14,
fontsize_col = 18  # make column labels bigger
)
dev.off()
pdf("FLVCR1_FLVCR2_GenesAsRows.pdf", width = 14, height = 14) # make width bigger
getwd()
# ---- 9) Plot tall heatmap (genes as rows) ----
# PNG
png("FLVCR1_FLVCR2_GenesAsRows.png", width = 1800, height = 3000, res = 250)
pheatmap(
mat_t,
cluster_rows = FALSE,          # keep within-block order we computed
cluster_cols = FALSE,          # only two columns
gaps_row = gaps_row,           # 3 cohort blocks
color = pal, breaks = breaks,
border_color = NA,
main = "Spearman correlations: Genes (rows) vs FLVCR1/FLVCR2 (cols)",
annotation_row = row_annot,
annotation_col = col_annot,
annotation_colors = c(ann_colors_rows, ann_colors_cols),
show_rownames = TRUE,
labels_row = labels_row,
fontsize_row = 9,              # increase/decrease for readability
cellheight = 14,               # increase for more spacing per gene
fontsize_col = 14
)
dev.off()
# PDF (vector)
pdf("FLVCR1_FLVCR2_GenesAsRows.pdf", width = 8, height = 14)
pheatmap(
mat_t,
cluster_rows = FALSE,
cluster_cols = FALSE,
gaps_row = gaps_row,
color = pal, breaks = breaks,
border_color = NA,
main = "Spearman correlations: Genes (rows) vs FLVCR1/FLVCR2 (cols)",
annotation_row = row_annot,
annotation_col = col_annot,
annotation_colors = c(ann_colors_rows, ann_colors_cols),
show_rownames = TRUE,
labels_row = labels_row,
fontsize_row = 8.5,
cellheight = 12,
fontsize_col = 12
)
dev.off()
cat("\nCohorts:", paste(unique(CancerType), collapse=" | "),
"\nGenes total:", nrow(mat_t),
"\nSign flips:", sum(row_annot$SignFlip == "Opposite", na.rm = TRUE), "/", nrow(mat_t), "\n")
# ---- 9) Plot tall heatmap (genes as rows) ----
# PNG
png("FLVCR1_FLVCR2_GenesAsRows.png", width = 1800, height = 3000, res = 250)
pheatmap(
mat_t,
cluster_rows = FALSE,          # keep within-block order we computed
cluster_cols = FALSE,          # only two columns
gaps_row = gaps_row,           # 3 cohort blocks
color = pal, breaks = breaks,
border_color = NA,
main = "Spearman correlations: Genes (rows) vs FLVCR1/FLVCR2 (cols)",
annotation_row = row_annot,
annotation_col = col_annot,
annotation_colors = c(ann_colors_rows, ann_colors_cols),
show_rownames = TRUE,
labels_row = labels_row,
fontsize_row = 9,              # increase/decrease for readability
cellheight = 14,               # increase for more spacing per gene
fontsize_col = 14
)
dev.off()
# PDF (vector)
pdf("FLVCR1_FLVCR2_GenesAsRows.pdf", width = 8, height = 14)
pheatmap(
mat_t,
cluster_rows = FALSE,
cluster_cols = FALSE,
gaps_row = gaps_row,
color = pal, breaks = breaks,
border_color = NA,
main = "Spearman correlations: Genes (rows) vs FLVCR1/FLVCR2 (cols)",
annotation_row = row_annot,
annotation_col = col_annot,
annotation_colors = c(ann_colors_rows, ann_colors_cols),
show_rownames = TRUE,
labels_row = labels_row,
fontsize_row = 8.5,
cellheight = 12,
fontsize_col = 12
)
dev.off()
cat("\nCohorts:", paste(unique(CancerType), collapse=" | "),
"\nGenes total:", nrow(mat_t),
"\nSign flips:", sum(row_annot$SignFlip == "Opposite", na.rm = TRUE), "/", nrow(mat_t), "\n")
library(pheatmap); library(RColorBrewer); library(gridExtra)
install.packages(gridExtra)
install.packages('gridExtra')
library(pheatmap); library(RColorBrewer); library(gridExtra)
# install.packages(c("readxl","dplyr","stringr","pheatmap","RColorBrewer","gridExtra")) # if needed
suppressPackageStartupMessages({
library(readxl); library(dplyr); library(stringr)
library(pheatmap); library(RColorBrewer); library(gridExtra)
})
# ---- 0) Input ----
# Keep double quotes because of apostrophe in "Guo's lab"
path <- "~/Desktop/Guo's lab/Wang Qiang/Raw_Data/Flvcr1 and Flvcr2.xlsx"
sheet_index <- 1
# Figure sizing (tune if needed)
cellheight_pt <- 12          # points per row
top_bottom_margin_in <- 2    # extra inches for title/legend
panel_width_in <- 8          # width (in) per panel
dpi <- 300                   # PNG resolution
to_num <- function(x) suppressWarnings(as.numeric(x))
# ---- 1) Read Excel (no headers) ----
raw <- read_excel(path, sheet = sheet_index, col_names = FALSE)
# ---- 2) Detect cohort blocks ----
is_cohort_row <- apply(raw, 1, function(r)
any(stringr::str_detect(as.character(r), "(TCGA|GDC)"), na.rm = TRUE))
cohort_idx <- which(is_cohort_row)
get_title <- function(i){
row <- as.character(unlist(raw[i, ]))
row <- row[!is.na(row) & trimws(row) != ""]
if (length(row) == 0) "Unknown" else row[1]
}
titles <- sapply(cohort_idx, get_title)
blocks <- data.frame(
start = cohort_idx,
end   = c(cohort_idx[-1] - 1, nrow(raw)),
title = titles,
stringsAsFactors = FALSE
)
# Expecting 4 cohorts in this order:
# 1 GBM (TCGA, PanCancer Atlas, 592 samples)
# 2 Pancreatic Adenocarcinoma (TCGA, PanCancer Atlas, 175 samples)
# 3 Breast Invasive Carcinoma (TCGA, PanCancer Atlas, 996 samples)
# 4 High-grade Serous Ovarian Cancer (TCGA, GDC, 394 samples)
blocks_sel <- blocks
detected <- tibble::tibble(
panel_order_index = seq_len(nrow(blocks_sel)),
approx_excel_row  = blocks_sel$start,
title             = blocks_sel$title
)
print(detected, n = Inf)
# ---- 3) Parse a cohort block into (gene, FLVCR1, FLVCR2) table ----
parse_block <- function(raw, start_idx, end_idx) {
# find header row containing FLVCR1 and FLVCR2
hdr_row <- NA_integer_
for (i in seq(start_idx, end_idx)) {
rowv <- as.character(unlist(raw[i, ]))
if (any(rowv == "FLVCR1", na.rm = TRUE) && any(rowv == "FLVCR2", na.rm = TRUE)) {
hdr_row <- i; break
}
}
if (is.na(hdr_row)) { message("No FLVCR1/2 header in rows ", start_idx, ":", end_idx); return(NULL) }
row_hdr <- as.character(unlist(raw[hdr_row, ]))
# robust match: "Spearman's correlation" or "Spearman correlation"
spearman_cols <- which(stringr::str_detect(tolower(row_hdr), "spearman.?s? correlation"))
if (length(spearman_cols) < 2) { message("Spearman columns <2 in rows ", start_idx, ":", end_idx); return(NULL) }
gene_cols <- spearman_cols - 1
data_rows <- seq(hdr_row + 1, end_idx)
left  <- raw[data_rows, c(gene_cols[1], spearman_cols[1])]
right <- raw[data_rows, c(gene_cols[2], spearman_cols[2])]
names(left)  <- c("gene",  "FLVCR1")
names(right) <- c("gene2", "FLVCR2")
left <- left  %>% mutate(gene  = trimws(as.character(gene)),  FLVCR1 = to_num(FLVCR1)) %>%
filter(!is.na(gene), gene != "", !is.na(FLVCR1))
right <- right %>% mutate(gene2 = trimws(as.character(gene2)), FLVCR2 = to_num(FLVCR2)) %>%
filter(!is.na(gene2), gene2 != "", !is.na(FLVCR2))
left_c  <- left  %>% group_by(gene)  %>% summarise(FLVCR1 = mean(FLVCR1, na.rm = TRUE), .groups = "drop")
right_c <- right %>% group_by(gene2) %>% summarise(FLVCR2 = mean(FLVCR2, na.rm = TRUE), .groups = "drop")
full_join(left_c, right_c, by = c("gene" = "gene2")) %>%
filter(!(is.na(FLVCR1) & is.na(FLVCR2))) %>%
distinct(gene, .keep_all = TRUE)
}
# ---- 4) Parse all cohorts ----
cohort_tables <- list(); cohort_labels <- character(0)
for (k in seq_len(nrow(blocks_sel))) {
b <- blocks_sel[k, ]
tab <- parse_block(raw, b$start, b$end)
if (!is.null(tab) && nrow(tab) > 0) {
cohort_tables[[length(cohort_tables) + 1]] <- tab
cohort_labels <- c(cohort_labels, b$title)
}
}
stopifnot(length(cohort_tables) >= 4)
# ---- 5) Cluster/order genes within each cohort ----
order_block <- function(tab) {
m <- rbind(FLVCR1 = tab$FLVCR1, FLVCR2 = tab$FLVCR2)
colnames(m) <- tab$gene
ord <- hclust(dist(t(m)), method = "average")$order
list(mat = m[, ord, drop = FALSE], ord = ord)
}
block_mats <- lapply(cohort_tables, order_block)
# ---- 6) Clean display labels; tag colnames to guarantee uniqueness ----
tags <- sapply(cohort_labels, function(t) {
if (grepl("GBM", t, ignore.case = TRUE)) "GBM"
else if (grepl("Pancre", t, ignore.case = TRUE)) "PAAD"
else if (grepl("Breast", t, ignore.case = TRUE)) "BRCA"
else if (grepl("Ovar",  t, ignore.case = TRUE)) "OV"
else gsub("[^A-Za-z0-9]+", "", substr(t, 1, 8))
})
display_labels_list <- vector("list", length(block_mats))
for (i in seq_along(block_mats)) {
genes_i <- colnames(block_mats[[i]]$mat)
display_labels_list[[i]] <- genes_i
colnames(block_mats[[i]]$mat) <- make.unique(paste0(genes_i, "|", tags[i]))
}
# ---- 7) FIXED panel split (as requested) ----
# Panel 1: GBM (1) + Pancreatic Adenocarcinoma (2)
# Panel 2: Breast Invasive Carcinoma (3) + High-grade Serous Ovarian Cancer (4)
panel_groups <- list(
panel1 = c(1, 2),
panel2 = c(3, 4)
)
# ---- 8) Build panel objects ----
build_panel <- function(idx_vec) {
mats <- lapply(idx_vec, function(i) block_mats[[i]]$mat)
mat_combined_sub <- do.call(cbind, mats)
block_sizes_sub <- sapply(idx_vec, function(i) ncol(block_mats[[i]]$mat))
gaps_row_sub <- cumsum(block_sizes_sub)
if (length(gaps_row_sub) > 1) gaps_row_sub <- gaps_row_sub[-length(gaps_row_sub)] else gaps_row_sub <- NULL
CancerType_sub <- rep(cohort_labels[idx_vec], times = block_sizes_sub)
mat_t_sub <- t(mat_combined_sub)
sign_flip_sub <- sign(mat_combined_sub["FLVCR1", ]) != sign(mat_combined_sub["FLVCR2", ])
row_annot_sub <- data.frame(
CancerType = CancerType_sub,
SignFlip   = ifelse(sign_flip_sub, "Opposite", "Same"),
row.names  = rownames(mat_t_sub)
)
labels_row_sub <- unlist(display_labels_list[idx_vec], use.names = FALSE)
list(mat_t = mat_t_sub, gaps_row = gaps_row_sub, row_annot = row_annot_sub,
labels_row = labels_row_sub, n_rows = nrow(mat_t_sub),
cancer_types = unique(CancerType_sub))
}
p1 <- build_panel(panel_groups[[1]])
p2 <- build_panel(panel_groups[[2]])
# ---- 9) Shared color scale & annotations ----
pal    <- colorRampPalette(rev(brewer.pal(11, "RdBu")))(101)
breaks <- seq(-1, 1, length.out = 101)
col_annot <- data.frame(Variable = c("FLVCR1", "FLVCR2"))
rownames(col_annot) <- c("FLVCR1", "FLVCR2")
ct_levels <- unique(c(p1$row_annot$CancerType, p2$row_annot$CancerType))
ct_palette <- setNames(brewer.pal(max(3, length(ct_levels)), "Set2")[seq_along(ct_levels)], ct_levels)
ann_colors_rows <- list(CancerType = ct_palette, SignFlip = c(Opposite = "#d95f02", Same = "#1b9e77"))
ann_colors_cols <- list(Variable = c(FLVCR1 = "#4575b4", FLVCR2 = "#d73027"))
ann_cols <- c(ann_colors_rows, ann_colors_cols)
plot_panel <- function(P, main_title = "") {
pheatmap(
P$mat_t,
cluster_rows = FALSE, cluster_cols = FALSE,
gaps_row = P$gaps_row,
color = pal, breaks = breaks, border_color = NA,
main = main_title,
annotation_row = P$row_annot,
annotation_col = col_annot,
annotation_colors = ann_cols,
show_rownames = TRUE, labels_row = P$labels_row,
fontsize_row = max(6, min(12, cellheight_pt * 0.7)),
cellheight = cellheight_pt, fontsize_col = 12,
silent = TRUE
)
}
g1 <- plot_panel(p1, main_title = "Panel 1: GBM | Pancreatic Adenocarcinoma")
g2 <- plot_panel(p2, main_title = "Panel 2: Breast Invasive Carcinoma | High-grade Serous Ovarian Cancer")
# ---- 10) Device sizes & output ----
rows_max <- max(p1$n_rows, p2$n_rows)
height_in <- (rows_max * cellheight_pt) / 72 + top_bottom_margin_in
width_in  <- 2 * panel_width_in
png("FLVCR1_FLVCR2_TwoPanels.png", width = width_in * dpi, height = height_in * dpi, res = dpi)
grid.arrange(grobs = list(g1$gtable, g2$gtable), ncol = 2)
dev.off()
pdf("FLVCR1_FLVCR2_TwoPanels.pdf", width = width_in, height = height_in)
grid.arrange(grobs = list(g1$gtable, g2$gtable), ncol = 2)
dev.off()
# Also save each panel separately (useful for slides/printing)
pdf("FLVCR1_FLVCR2_Panel1.pdf", width = panel_width_in, height = height_in); grid.arrange(grobs = list(g1$gtable), ncol = 1); dev.off()
pdf("FLVCR1_FLVCR2_Panel2.pdf", width = panel_width_in, height = height_in); grid.arrange(grobs = list(g2$gtable), ncol = 1); dev.off()
# ---- 11) Summary ----
cat("\nCohort order:\n"); print(detected, n = Inf)
cat("\nPanel 1 cohorts: GBM | Pancreatic Adenocarcinoma",
"\nPanel 2 cohorts: Breast Invasive Carcinoma | High-grade Serous Ovarian Cancer\n", sep = "")
cat("Outputs:\n- FLVCR1_FLVCR2_TwoPanels.png / .pdf\n- FLVCR1_FLVCR2_Panel1.pdf\n- FLVCR1_FLVCR2_Panel2.pdf\n")
# Auto-size device from the actual grobs (no clipping)
library(grid)
# Compute required height/width in inches from each panel
h1_in <- sum(convertHeight(g1$gtable$heights, "in", valueOnly = TRUE))
h2_in <- sum(convertHeight(g2$gtable$heights, "in", valueOnly = TRUE))
w1_in <- sum(convertWidth( g1$gtable$widths,  "in", valueOnly = TRUE))
w2_in <- sum(convertWidth( g2$gtable$widths,  "in", valueOnly = TRUE))
# Take the max height; give a little padding
height_in <- max(h1_in, h2_in) + 0.25
# Make both panels the same width (use the larger), then double for side-by-side
panel_width_in <- max(w1_in, w2_in)
width_in  <- 2 * panel_width_in
dpi <- 300
png("FLVCR1_FLVCR2_TwoPanels.png", width = width_in * dpi, height = height_in * dpi, res = dpi)
gridExtra::grid.arrange(grobs = list(g1$gtable, g2$gtable), ncol = 2)
dev.off()
pdf("FLVCR1_FLVCR2_TwoPanels.pdf", width = width_in, height = height_in)
gridExtra::grid.arrange(grobs = list(g1$gtable, g2$gtable), ncol = 2)
dev.off()
