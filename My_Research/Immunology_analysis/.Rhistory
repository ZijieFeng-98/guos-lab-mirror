cat("✗ GDC server returned error status:", httr::status_code(response), "\n")
return(FALSE)
}
}, error = function(e) {
cat("✗ GDC server is not accessible\n")
cat("Error:", e$message, "\n")
return(FALSE)
})
}
# Check status
server_available <- check_gdc_status()
cat("=== GDC Server Status Check ===\n\n")
# Check if httr package is available
if (!require(httr, quietly = TRUE)) {
cat("Installing httr package...\n")
install.packages("httr")
library(httr)
}
# Function to check GDC status
check_gdc_status <- function() {
cat("Checking GDC server status...\n")
tryCatch({
# Set timeout to 10 seconds
response <- httr::GET("https://api.gdc.cancer.gov/status",
httr::timeout(10))
if (httr::status_code(response) == 200) {
cat("✓ GDC server is accessible!\n")
cat("Status code:", httr::status_code(response), "\n")
return(TRUE)
} else {
cat("✗ GDC server returned error status:", httr::status_code(response), "\n")
return(FALSE)
}
}, error = function(e) {
cat("✗ GDC server is not accessible\n")
cat("Error:", e$message, "\n")
return(FALSE)
})
}
# Check status
server_available <- check_gdc_status()
# Load required libraries
library(TCGAbiolinks)
library(SummarizedExperiment)
library(pheatmap)
# Step 1: Query and download data
query <- GDCquery(
project = "TCGA-GBM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
cat("Checking GDC server status...\n")
tryCatch({
# Set timeout to 10 seconds
response <- httr::GET("https://api.gdc.cancer.gov/status",
httr::timeout(10))
if (httr::status_code(response) == 200) {
cat("✓ GDC server is accessible!\n")
cat("Status code:", httr::status_code(response), "\n")
return(TRUE)
} else {
cat("✗ GDC server returned error status:", httr::status_code(response), "\n")
return(FALSE)
}
}, error = function(e) {
cat("✗ GDC server is not accessible\n")
cat("Error:", e$message, "\n")
return(FALSE)
})
# Function to check GDC status
check_gdc_status <- function() {
cat("Checking GDC server status...\n")
tryCatch({
# Set timeout to 10 seconds
response <- httr::GET("https://api.gdc.cancer.gov/status",
httr::timeout(10))
if (httr::status_code(response) == 200) {
cat("✓ GDC server is accessible!\n")
cat("Status code:", httr::status_code(response), "\n")
return(TRUE)
} else {
cat("✗ GDC server returned error status:", httr::status_code(response), "\n")
return(FALSE)
}
}, error = function(e) {
cat("✗ GDC server is not accessible\n")
cat("Error:", e$message, "\n")
return(FALSE)
})
}
# Check status
server_available <- check_gdc_status()
cat("\n=== Recommendations ===\n")
if (server_available) {
cat("✓ Server is available! You can:\n")
cat("1. Run the main analysis: source('TCGA_GBM_Correlation_Analysis_Expanded_Immune.R')\n")
cat("2. Download data for offline use: source('download_tcga_data.R')\n")
} else {
cat("✗ Server is down. You can:\n")
cat("1. Check if you have local data: ls -la gbm_data.rds\n")
cat("2. Run offline analysis if data exists: source('TCGA_GBM_Correlation_Analysis_Offline.R')\n")
cat("3. Wait and try again later\n")
cat("4. Visit https://portal.gdc.cancer.gov/ for manual download\n")
}
cat("\n=== Current Directory Files ===\n")
cat("Available scripts:\n")
files <- list.files(pattern = "\\.R$")
for (file in files) {
cat("-", file, "\n")
}
# Step 1: Query and download data
query <- GDCquery(
project = "TCGA-GBM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
unlink("GDCdata", recursive = TRUE)
list.files("GDCdata", recursive = TRUE)
# Load required libraries
library(TCGAbiolinks)
library(SummarizedExperiment)
library(pheatmap)
# Step 1: Query and download data
query <- GDCquery(
project = "TCGA-GBM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
# Step 1: Query and download data
query <- GDCquery(
project = "TCGA-GBM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
gbm_data <- GDCprepare(query)
# ✅ Keep only primary tumor samples (shortLetterCode == 'TP')
gbm_data <- gbm_data[, colData(gbm_data)$shortLetterCode == "TP"]
# Step 2: Extract expression matrix and clean gene names
expr <- assay(gbm_data)
gene_names <- rowData(gbm_data)$gene_name
valid_genes <- !is.na(gene_names) & !duplicated(gene_names)
expr <- expr[valid_genes, ]
rownames(expr) <- gene_names[valid_genes]
# Step 3: Define genes of interest
pathway_genes <- c("FLVCR1", "FLVCR2", "TXNDC16", "SOAT1", "SOAT2", "SCAP", "SREBF1",
"TMEM173", "MB21D1", "LRP1", "LRP8", "LDLR", "APOA1", "APOB", "APOC1",
"APOD", "APOE", "DGAT1", "DGAT2")
immune_markers <- unique(c(
# Cytokines / Cytolytic
"IFNA1", "IFNB1", "IL1B", "IL6", "TNF", "GZMA", "GZMB", "PRF1", "CXCL9", "CXCL10", "CCL2", "CCL4", "CCL5",
# IFN-related
"STAT1", "IRF7", "ISG15", "IFIT1", "IFI6", "MX1", "OAS1",
# Immune checkpoints
"CD274", "HAVCR2", "IDO1", "LGALS9",
# MHC / Antigen Presentation
"HLA-DRA", "HLA-DRB1", "CD74", "CD83", "CTSB", "CTSS",
# T cell markers
"CD3D", "CD4", "CD8A",
# B cell
"CD19", "CD79A",
# Macrophage / Monocyte
"CD14", "CD68", "CD163", "MRC1", "ITGAM", "CCR2", "FCN1", "LYZ",
# Microglia
"P2RY12", "TMEM119", "CX3CR1", "TREM2", "GPR34",
# DC markers
"CD1C", "ITGAX", "CLEC9A", "CD86",
# NK cell markers
"NCAM1", "NKG7", "KLRD1", "GNLY"
))
# Step 4: Filter expression matrix
genes_of_interest <- intersect(rownames(expr), unique(c(pathway_genes, immune_markers)))
expr_filtered <- expr[genes_of_interest, ]
# Step 5: Spearman correlation
cor_mat <- cor(t(expr_filtered), method = "spearman")
pathway_in_expr <- intersect(pathway_genes, rownames(expr_filtered))
immune_in_expr <- intersect(immune_markers, rownames(expr_filtered))
cor_block <- cor_mat[pathway_in_expr, immune_in_expr]
# Step 6: Create output directory if it doesn't exist
out_dir <- file.path("/Users/zijiefeng/Desktop/Guo's lab",
"My_Research",
"Immunology_analysis",
"Processed_Data")
if (!dir.exists(out_dir)) {
dir.create(out_dir, recursive = TRUE)
}
# Step 7: Save heatmap
out_path <- file.path(out_dir, "Spearman_Correlation_Heatmap_All_Immune.png")
png(filename = out_path, width = 2600, height = 1600, res = 300)
pheatmap(cor_block,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = FALSE,
fontsize = 10,
main = "Spearman Correlation: Pathway vs Full Immune Marker Set (TCGA-GBM)")
dev.off()
# Step 8: Print summary statistics
cat("Analysis Summary:\n")
cat("================\n")
cat("Total samples analyzed:", ncol(expr_filtered), "\n")
cat("Pathway genes found in data:", length(pathway_in_expr), "/", length(pathway_genes), "\n")
cat("Immune markers found in data:", length(immune_in_expr), "/", length(immune_markers), "\n")
cat("Output saved to:", out_path, "\n")
# Step 9: Save correlation matrix as CSV for further analysis
cor_csv_path <- file.path(out_dir, "Spearman_Correlation_Matrix_All_Immune.csv")
write.csv(cor_block, file = cor_csv_path)
cat("Correlation matrix saved to:", cor_csv_path, "\n")
# Load required libraries
library(TCGAbiolinks)
library(SummarizedExperiment)
library(pheatmap)
# Step 1: Query and download data
query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
GDCdownload(query)
cat("=== GDC Server Status Check ===\n\n")
# Check if httr package is available
if (!require(httr, quietly = TRUE)) {
cat("Installing httr package...\n")
install.packages("httr")
library(httr)
}
cat("=== GDC Server Status Check ===\n\n")
# Check if httr package is available
if (!require(httr, quietly = TRUE)) {
cat("Installing httr package...\n")
install.packages("httr")
library(httr)
}
# Function to check GDC status
check_gdc_status <- function() {
cat("Checking GDC server status...\n")
tryCatch({
# Set timeout to 10 seconds
response <- httr::GET("https://api.gdc.cancer.gov/status",
httr::timeout(10))
if (httr::status_code(response) == 200) {
cat("✓ GDC server is accessible!\n")
cat("Status code:", httr::status_code(response), "\n")
return(TRUE)
} else {
cat("✗ GDC server returned error status:", httr::status_code(response), "\n")
return(FALSE)
}
}, error = function(e) {
cat("✗ GDC server is not accessible\n")
cat("Error:", e$message, "\n")
return(FALSE)
})
}
# Check status
server_available <- check_gdc_status()
cat("=== GDC Server Status Check ===\n\n")
# Check if httr package is available
if (!require(httr, quietly = TRUE)) {
cat("Installing httr package...\n")
install.packages("httr")
library(httr)
}
# Function to check GDC status
check_gdc_status <- function() {
cat("Checking GDC server status...\n")
tryCatch({
# Set timeout to 10 seconds
response <- httr::GET("https://api.gdc.cancer.gov/status",
httr::timeout(10))
if (httr::status_code(response) == 200) {
cat("✓ GDC server is accessible!\n")
cat("Status code:", httr::status_code(response), "\n")
return(TRUE)
} else {
cat("✗ GDC server returned error status:", httr::status_code(response), "\n")
return(FALSE)
}
}, error = function(e) {
cat("✗ GDC server is not accessible\n")
cat("Error:", e$message, "\n")
return(FALSE)
})
}
# Check status
server_available <- check_gdc_status()
# Step 1: Query and download data
query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
brca_data <- GDCprepare(query)
# ✅ Keep only primary tumor samples (shortLetterCode == 'TP')
brca_data <- brca_data[, colData(brca_data)$shortLetterCode == "TP"]
# Step 2: Extract expression matrix and clean gene names
expr <- assay(brca_data)
gene_names <- rowData(brca_data)$gene_name
valid_genes <- !is.na(gene_names) & !duplicated(gene_names)
expr <- expr[valid_genes, ]
rownames(expr) <- gene_names[valid_genes]
# Step 3: Define genes of interest
pathway_genes <- c("FLVCR1", "FLVCR2", "TXNDC16", "SOAT1", "SOAT2", "SCAP", "SREBF1",
"TMEM173", "MB21D1", "LRP1", "LRP8", "LDLR", "APOA1", "APOB", "APOC1",
"APOD", "APOE", "DGAT1", "DGAT2")
immune_markers <- unique(c(
# Cytokines / Cytolytic
"IFNA1", "IFNB1", "IL1B", "IL6", "TNF", "GZMA", "GZMB", "PRF1", "CXCL9", "CXCL10", "CCL2", "CCL4", "CCL5",
# IFN-related
"STAT1", "IRF7", "ISG15", "IFIT1", "IFI6", "MX1", "OAS1",
# Immune checkpoints
"CD274", "HAVCR2", "IDO1", "LGALS9",
# MHC / Antigen Presentation
"HLA-DRA", "HLA-DRB1", "CD74", "CD83", "CTSB", "CTSS",
# T cell markers
"CD3D", "CD4", "CD8A",
# B cell
"CD19", "CD79A",
# Macrophage / Monocyte
"CD14", "CD68", "CD163", "MRC1", "ITGAM", "CCR2", "FCN1", "LYZ",
# Microglia
"P2RY12", "TMEM119", "CX3CR1", "TREM2", "GPR34",
# DC markers
"CD1C", "ITGAX", "CLEC9A", "CD86",
# NK cell markers
"NCAM1", "NKG7", "KLRD1", "GNLY"
))
# Step 4: Filter expression matrix
genes_of_interest <- intersect(rownames(expr), unique(c(pathway_genes, immune_markers)))
expr_filtered <- expr[genes_of_interest, ]
# Step 5: Spearman correlation
cor_mat <- cor(t(expr_filtered), method = "spearman")
pathway_in_expr <- intersect(pathway_genes, rownames(expr_filtered))
immune_in_expr <- intersect(immune_markers, rownames(expr_filtered))
cor_block <- cor_mat[pathway_in_expr, immune_in_expr]
# Step 6: Create output directory if it doesn't exist
out_dir <- file.path("/Users/zijiefeng/Desktop/Guo's lab",
"My_Research",
"Immunology_analysis",
"Processed_Data")
if (!dir.exists(out_dir)) {
dir.create(out_dir, recursive = TRUE)
}
# Step 7: Save heatmap
out_path <- file.path(out_dir, "Spearman_Correlation_Heatmap_BRCA_All_Immune.png")
png(filename = out_path, width = 2600, height = 1600, res = 300)
pheatmap(cor_block,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = FALSE,
fontsize = 10,
main = "Spearman Correlation: Pathway vs Full Immune Marker Set (TCGA-BRCA)")
dev.off()
# Step 8: Print summary statistics
cat("Analysis Summary (TCGA-BRCA):\n")
cat("=============================\n")
cat("Total samples analyzed:", ncol(expr_filtered), "\n")
cat("Pathway genes found in data:", length(pathway_in_expr), "/", length(pathway_genes), "\n")
cat("Immune markers found in data:", length(immune_in_expr), "/", length(immune_markers), "\n")
cat("Output saved to:", out_path, "\n")
# Step 9: Save correlation matrix as CSV for further analysis
cor_csv_path <- file.path(out_dir, "Spearman_Correlation_Matrix_BRCA_All_Immune.csv")
write.csv(cor_block, file = cor_csv_path)
cat("Correlation matrix saved to:", cor_csv_path, "\n")
# Step 1: Query and download data
query <- GDCquery(
project = "TCGA-OV",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
GDCdownload(query)
ov_data <- GDCprepare(query)
ov_data <- GDCprepare(query)
library(SummarizedExperiment)
cat("=== Converting GDC Data to RDS Format ===\n\n")
# Function to read and combine TSV files
read_tsv_files <- function(data_dir) {
cat("Reading TSV files from:", data_dir, "\n")
# Find all TSV files
tsv_files <- list.files(data_dir, pattern = "\\.tsv$", recursive = TRUE, full.names = TRUE)
cat("Found", length(tsv_files), "TSV files\n")
if (length(tsv_files) == 0) {
stop("No TSV files found in directory")
}
# Read first file to get gene structure
cat("Reading first file to get gene structure...\n")
first_file <- read.table(tsv_files[1], header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Extract gene information
gene_data <- data.frame(
gene_id = first_file$gene_id,
gene_name = first_file$gene_name,
gene_type = first_file$gene_type,
stringsAsFactors = FALSE
)
# Initialize expression matrix
expr_matrix <- matrix(0, nrow = nrow(gene_data), ncol = length(tsv_files))
colnames(expr_matrix) <- basename(dirname(tsv_files))
rownames(expr_matrix) <- gene_data$gene_id
# Read all files
cat("Reading all TSV files...\n")
for (i in seq_along(tsv_files)) {
if (i %% 50 == 0) {
cat("  Processed", i, "of", length(tsv_files), "files...\n")
}
# Read file
data <- read.table(tsv_files[i], header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Extract count data (using unstranded counts)
if ("unstranded" %in% colnames(data)) {
expr_matrix[, i] <- data$unstranded
} else {
# Fallback to first numeric column
numeric_cols <- sapply(data, is.numeric)
if (any(numeric_cols)) {
expr_matrix[, i] <- data[, which(numeric_cols)[1]]
}
}
}
cat("✓ Successfully read all files\n")
return(list(expression = expr_matrix, gene_data = gene_data, sample_files = tsv_files))
}
# Function to create SummarizedExperiment object
create_summarized_experiment <- function(data_list, cancer_type) {
cat("Creating SummarizedExperiment object for", cancer_type, "...\n")
# Create row data
row_data <- data_list$gene_data
rownames(row_data) <- row_data$gene_id
# Create column data
sample_ids <- colnames(data_list$expression)
col_data <- data.frame(
sample_id = sample_ids,
shortLetterCode = rep("TP", length(sample_ids)),  # Assume all are primary tumor
sample_type = rep("Primary Tumor", length(sample_ids)),
project_id = rep(paste0("TCGA-", cancer_type), length(sample_ids)),
stringsAsFactors = FALSE
)
rownames(col_data) <- sample_ids
# Create SummarizedExperiment
se <- SummarizedExperiment(
assays = list(counts = data_list$expression),
rowData = row_data,
colData = col_data
)
# Set row names to gene names for easier access
rownames(se) <- row_data$gene_name
cat("✓ Created SummarizedExperiment with", nrow(se), "genes and", ncol(se), "samples\n")
return(se)
}
# Function to process each cancer type
process_cancer_type <- function(cancer_type) {
cat("\n=== Processing", cancer_type, "===\n")
# Define data directory
data_dir <- file.path("GDCdata", paste0("TCGA-", cancer_type),
"harmonized", "Transcriptome_Profiling", "Gene_Expression_Quantification")
if (!dir.exists(data_dir)) {
cat("✗ Directory not found:", data_dir, "\n")
return(NULL)
}
# Read TSV files
data_list <- read_tsv_files(data_dir)
# Create SummarizedExperiment
se <- create_summarized_experiment(data_list, cancer_type)
# Save as RDS
output_file <- paste0(tolower(cancer_type), "_data.rds")
cat("Saving to:", output_file, "\n")
saveRDS(se, file = output_file)
cat("✓", cancer_type, "data saved successfully!\n")
cat("  File size:", format(file.size(output_file), units = "MB"), "\n")
cat("  Genes:", nrow(se), "\n")
cat("  Samples:", ncol(se), "\n")
return(se)
}
# Main execution
main <- function() {
cat("Starting GDC data conversion...\n\n")
# Process each cancer type
cancer_types <- c("GBM", "BRCA", "OV")
results <- list()
for (cancer_type in cancer_types) {
result <- process_cancer_type(cancer_type)
if (!is.null(result)) {
results[[cancer_type]] <- result
}
}
# Summary
cat("\n=== Conversion Complete ===\n")
cat("Successfully converted", length(results), "cancer types:\n")
for (cancer_type in names(results)) {
se <- results[[cancer_type]]
cat("  ", cancer_type, ":", ncol(se), "samples,", nrow(se), "genes\n")
}
cat("\nRDS files created:\n")
for (cancer_type in names(results)) {
file_name <- paste0(tolower(cancer_type), "_data.rds")
if (file.exists(file_name)) {
cat("  ", file_name, " (", format(file.size(file_name), units = "MB"), ")\n")
}
}
cat("\nYou can now use these RDS files with your offline analysis scripts!\n")
}
# Run the conversion
main()
installed.packages('immunedeconv')
