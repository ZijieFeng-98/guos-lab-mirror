source("install_packages.R")
source('apoe_analysis.R')
source("run_test.R")
# Load required libraries
library(vcfR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
library(purrr)
library(forcats)
library(R.utils)
# Set working directory and create output folders
if (!dir.exists("output")) dir.create("output")
if (!dir.exists("data")) dir.create("data")
# Function to download 1000 Genomes data if not present
download_1000g_data <- function() {
# URLs for 1000 Genomes Phase 3 data
vcf_url <- "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr19.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
sample_url <- "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/integrated_call_samples_v3.20130502.ALL.panel"
# Download VCF if not present
vcf_file <- "data/ALL.chr19.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
if (!file.exists(vcf_file)) {
message("Downloading chromosome 19 VCF file...")
download.file(vcf_url, vcf_file, method = "wget")
# Download tabix index
tabix_url <- paste0(vcf_url, ".tbi")
tabix_file <- paste0(vcf_file, ".tbi")
download.file(tabix_url, tabix_file, method = "wget")
}
# Download sample metadata if not present
sample_file <- "data/integrated_call_samples_v3.20130502.ALL.panel"
if (!file.exists(sample_file)) {
message("Downloading sample metadata...")
download.file(sample_url, sample_file, method = "wget")
}
}
# Function to verify SNP coordinates in GRCh37
verify_snp_coordinates <- function() {
# APOE SNPs in GRCh37/hg19 coordinates
snp_info <- data.frame(
rsid = c("rs429358", "rs7412"),
chr = c(19, 19),
pos = c(45411941, 45412079),  # GRCh37 coordinates
ref = c("T", "C"),
alt = c("C", "T"),
stringsAsFactors = FALSE
)
message("APOE SNP coordinates (GRCh37/hg19):")
print(snp_info)
return(snp_info)
}
# Function to load and subset VCF data
load_vcf_data <- function(vcf_file, snp_info) {
message("Loading VCF data...")
# Read VCF file
vcf <- read.vcfR(vcf_file)
# Extract SNP information
snp_data <- getFIX(vcf)
# Find our SNPs by ID
target_snps <- which(snp_data[, "ID"] %in% snp_info$rsid)
if (length(target_snps) == 0) {
stop("Target SNPs not found in VCF file")
}
message("Found SNPs: ", paste(snp_data[target_snps, "ID"], collapse = ", "))
# Subset VCF to target SNPs
vcf_subset <- vcf[target_snps, ]
return(vcf_subset)
}
# Function to extract genotypes and perform QC
extract_genotypes <- function(vcf_subset) {
message("Extracting genotypes...")
# Extract genotype matrix
gt_matrix <- extract.gt(vcf_subset)
# Get sample names
sample_names <- colnames(gt_matrix)
# Create data frame with genotypes
geno_df <- data.frame(
sample_id = sample_names,
rs429358 = gt_matrix[1, ],
rs7412 = gt_matrix[2, ],
stringsAsFactors = FALSE
)
# Basic QC: remove samples with missing genotypes
initial_samples <- nrow(geno_df)
geno_df <- geno_df[!is.na(geno_df$rs429358) & !is.na(geno_df$rs7412), ]
final_samples <- nrow(geno_df)
message("QC: Removed ", initial_samples - final_samples, " samples with missing genotypes")
message("Final sample count: ", final_samples)
# Verify phasing (should be 0|1, 1|0, etc.)
phased_check <- all(grepl("\\|", geno_df$rs429358)) & all(grepl("\\|", geno_df$rs7412))
message("Phasing check: ", ifelse(phased_check, "PASS", "FAIL"))
return(geno_df)
}
# Function to build haplotypes and assign APOE isoforms
build_haplotypes <- function(geno_df) {
message("Building haplotypes...")
# Function to split phased genotypes
split_phased <- function(gt_string) {
if (is.na(gt_string) || gt_string == "") return(c(NA, NA))
alleles <- str_split(gt_string, "\\|")[[1]]
return(as.numeric(alleles))
}
# Split genotypes for both SNPs
rs429358_split <- t(sapply(geno_df$rs429358, split_phased))
rs7412_split <- t(sapply(geno_df$rs7412, split_phased))
# Create haplotype data frame
haplo_df <- data.frame(
sample_id = geno_df$sample_id,
hap1_rs429358 = rs429358_split[, 1],
hap1_rs7412 = rs7412_split[, 1],
hap2_rs429358 = rs429358_split[, 2],
hap2_rs7412 = rs7412_split[, 2],
stringsAsFactors = FALSE
)
# Function to assign APOE haplotype
assign_apoe_haplotype <- function(rs429358_allele, rs7412_allele) {
# Convert numeric alleles to actual bases (0=REF, 1=ALT)
# For rs429358: REF=T, ALT=C
# For rs7412: REF=C, ALT=T
rs429358_base <- ifelse(rs429358_allele == 0, "T", "C")
rs7412_base <- ifelse(rs7412_allele == 0, "C", "T")
# Assign APOE haplotype
if (rs429358_base == "T" && rs7412_base == "T") return("ε2")
if (rs429358_base == "T" && rs7412_base == "C") return("ε3")
if (rs429358_base == "C" && rs7412_base == "C") return("ε4")
if (rs429358_base == "C" && rs7412_base == "T") return("ε1") # Non-canonical
return("unknown")
}
# Assign haplotypes
haplo_df$hap1_apoe <- mapply(assign_apoe_haplotype,
haplo_df$hap1_rs429358,
haplo_df$hap1_rs7412)
haplo_df$hap2_apoe <- mapply(assign_apoe_haplotype,
haplo_df$hap2_rs429358,
haplo_df$hap2_rs7412)
# Create genotype (sorted for consistency)
haplo_df$genotype <- mapply(function(h1, h2) {
paste(sort(c(h1, h2)), collapse = "/")
}, haplo_df$hap1_apoe, haplo_df$hap2_apoe)
# Add carrier status
haplo_df$carrier_e4 <- as.numeric(grepl("ε4", haplo_df$genotype))
haplo_df$carrier_e2 <- as.numeric(grepl("ε2", haplo_df$genotype))
# Check for non-canonical haplotypes
non_canonical <- haplo_df$hap1_apoe == "ε1" | haplo_df$hap2_apoe == "ε1"
if (any(non_canonical)) {
message("WARNING: Found ", sum(non_canonical), " non-canonical ε1 haplotypes")
}
return(haplo_df)
}
# Function to load sample metadata
load_sample_metadata <- function() {
message("Loading sample metadata...")
sample_file <- "data/integrated_call_samples_v3.20130502.ALL.panel"
# Read sample metadata
metadata <- read_tsv(sample_file, col_names = TRUE)
# Rename columns for clarity
colnames(metadata) <- c("sample_id", "pop", "super_pop", "gender")
return(metadata)
}
# Function to merge genotype and metadata
merge_data <- function(haplo_df, metadata) {
message("Merging genotype and metadata...")
# Merge data
merged_df <- haplo_df %>%
left_join(metadata, by = "sample_id")
# Check for missing metadata
missing_meta <- sum(is.na(merged_df$super_pop))
if (missing_meta > 0) {
message("WARNING: ", missing_meta, " samples missing metadata")
}
return(merged_df)
}
# Function to compute summary statistics
compute_summaries <- function(merged_df) {
message("Computing summary statistics...")
# Overall summaries
overall_summary <- list()
# Haplotype frequencies
all_haplotypes <- c(merged_df$hap1_apoe, merged_df$hap2_apoe)
haplo_freq <- table(all_haplotypes) / length(all_haplotypes)
overall_summary$haplotype_frequencies <- haplo_freq
# Genotype frequencies
geno_freq <- table(merged_df$genotype) / nrow(merged_df)
overall_summary$genotype_frequencies <- geno_freq
# Carrier rates
overall_summary$e4_carrier_rate <- mean(merged_df$carrier_e4, na.rm = TRUE)
overall_summary$e2_carrier_rate <- mean(merged_df$carrier_e2, na.rm = TRUE)
# By superpopulation
pop_summary <- merged_df %>%
filter(!is.na(super_pop)) %>%
group_by(super_pop) %>%
summarise(
n_samples = n(),
haplo_e2 = sum(c(hap1_apoe == "ε2", hap2_apoe == "ε2")) / (2 * n()),
haplo_e3 = sum(c(hap1_apoe == "ε3", hap2_apoe == "ε3")) / (2 * n()),
haplo_e4 = sum(c(hap1_apoe == "ε4", hap2_apoe == "ε4")) / (2 * n()),
e4_carrier_rate = mean(carrier_e4, na.rm = TRUE),
e2_carrier_rate = mean(carrier_e2, na.rm = TRUE),
.groups = "drop"
)
# Genotype counts by superpopulation
geno_by_pop <- merged_df %>%
filter(!is.na(super_pop)) %>%
group_by(super_pop, genotype) %>%
summarise(count = n(), .groups = "drop") %>%
pivot_wider(names_from = genotype, values_from = count, values_fill = 0)
return(list(
overall = overall_summary,
by_population = pop_summary,
genotype_by_pop = geno_by_pop
))
}
# Function to perform statistical tests
perform_statistical_tests <- function(merged_df) {
message("Performing statistical tests...")
# Chi-square test for ε4 carrier rates across superpopulations
e4_contingency <- merged_df %>%
filter(!is.na(super_pop)) %>%
group_by(super_pop) %>%
summarise(
e4_carrier = sum(carrier_e4),
non_e4_carrier = n() - sum(carrier_e4),
.groups = "drop"
)
e4_matrix <- as.matrix(e4_contingency[, c("e4_carrier", "non_e4_carrier")])
rownames(e4_matrix) <- e4_contingency$super_pop
chi_square_test <- chisq.test(e4_matrix)
# Fisher's exact test
fisher_test <- fisher.test(e4_matrix)
# Calculate odds ratios with 95% CIs
or_results <- data.frame()
# Use EUR as reference
ref_pop <- "EUR"
ref_e4 <- e4_contingency$e4_carrier[e4_contingency$super_pop == ref_pop]
ref_non_e4 <- e4_contingency$non_e4_carrier[e4_contingency$super_pop == ref_pop]
for (pop in e4_contingency$super_pop[e4_contingency$super_pop != ref_pop]) {
pop_e4 <- e4_contingency$e4_carrier[e4_contingency$super_pop == pop]
pop_non_e4 <- e4_contingency$non_e4_carrier[e4_contingency$super_pop == pop]
# Calculate odds ratio
or <- (pop_e4 * ref_non_e4) / (pop_non_e4 * ref_e4)
# Calculate 95% CI (Wald method)
se_log_or <- sqrt(1/pop_e4 + 1/pop_non_e4 + 1/ref_e4 + 1/ref_non_e4)
ci_lower <- exp(log(or) - 1.96 * se_log_or)
ci_upper <- exp(log(or) + 1.96 * se_log_or)
or_results <- rbind(or_results, data.frame(
population = pop,
reference = ref_pop,
odds_ratio = or,
ci_lower = ci_lower,
ci_upper = ci_upper
))
}
# Hardy-Weinberg equilibrium test for each superpopulation
hwe_results <- data.frame()
for (pop in unique(merged_df$super_pop)) {
if (is.na(pop)) next
pop_data <- merged_df[merged_df$super_pop == pop, ]
# Count ε4 alleles
e4_alleles <- sum(c(pop_data$hap1_apoe == "ε4", pop_data$hap2_apoe == "ε4"))
total_alleles <- 2 * nrow(pop_data)
p_e4 <- e4_alleles / total_alleles
# Expected genotype frequencies under HWE
expected_e4_e4 <- p_e4^2 * nrow(pop_data)
expected_e4_non <- 2 * p_e4 * (1 - p_e4) * nrow(pop_data)
expected_non_non <- (1 - p_e4)^2 * nrow(pop_data)
# Observed genotype counts
observed_e4_e4 <- sum(pop_data$genotype == "ε4/ε4")
observed_e4_non <- sum(grepl("ε4", pop_data$genotype) & pop_data$genotype != "ε4/ε4")
observed_non_non <- sum(!grepl("ε4", pop_data$genotype))
# Chi-square test
expected <- c(expected_e4_e4, expected_e4_non, expected_non_non)
observed <- c(observed_e4_e4, observed_e4_non, observed_non_non)
# Remove zero expected values
valid_idx <- expected > 0
if (sum(valid_idx) >= 2) {
chi_sq <- sum((observed[valid_idx] - expected[valid_idx])^2 / expected[valid_idx])
p_value <- pchisq(chi_sq, df = sum(valid_idx) - 1, lower.tail = FALSE)
hwe_results <- rbind(hwe_results, data.frame(
population = pop,
chi_square = chi_sq,
p_value = p_value,
hwe_violation = p_value < 0.05
))
}
}
return(list(
chi_square_test = chi_square_test,
fisher_test = fisher_test,
odds_ratios = or_results,
hardy_weinberg = hwe_results
))
}
# Function to create visualizations
create_visualizations <- function(summaries, stats_results) {
message("Creating visualizations...")
# 1. Haplotype frequency bar plot by superpopulation
haplo_plot_data <- summaries$by_population %>%
select(super_pop, haplo_e2, haplo_e3, haplo_e4) %>%
pivot_longer(cols = c(haplo_e2, haplo_e3, haplo_e4),
names_to = "haplotype", values_to = "frequency") %>%
mutate(haplotype = str_replace(haplotype, "haplo_", ""))
haplo_plot <- ggplot(haplo_plot_data, aes(x = super_pop, y = frequency, fill = haplotype)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "APOE Haplotype Frequencies by Superpopulation",
x = "Superpopulation", y = "Frequency", fill = "Haplotype") +
theme_minimal() +
scale_fill_manual(values = c("ε2" = "#E69F00", "ε3" = "#56B4E9", "ε4" = "#D55E00"))
ggsave("output/haplotype_frequencies.png", haplo_plot, width = 10, height = 6)
# 2. ε4 carrier rate bar plot
carrier_plot <- ggplot(summaries$by_population, aes(x = super_pop, y = e4_carrier_rate)) +
geom_bar(stat = "identity", fill = "#D55E00") +
labs(title = "ε4 Carrier Rates by Superpopulation",
x = "Superpopulation", y = "ε4 Carrier Rate") +
theme_minimal() +
ylim(0, 1)
ggsave("output/e4_carrier_rates.png", carrier_plot, width = 8, height = 6)
# 3. Forest plot of odds ratios
forest_plot <- ggplot(stats_results$odds_ratios,
aes(x = odds_ratio, y = population)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Odds Ratios for ε4 Carrier Status (Reference: EUR)",
x = "Odds Ratio (95% CI)", y = "Population") +
theme_minimal() +
scale_x_log10()
ggsave("output/odds_ratios_forest.png", forest_plot, width = 10, height = 6)
return(list(
haplotype_plot = haplo_plot,
carrier_plot = carrier_plot,
forest_plot = forest_plot
))
}
# Function to export results
export_results <- function(merged_df, summaries, stats_results) {
message("Exporting results...")
# Sample-level table
sample_table <- merged_df %>%
select(sample_id, pop, super_pop, hap1_apoe, hap2_apoe, genotype,
carrier_e4, carrier_e2)
write_csv(sample_table, "output/sample_level_results.csv")
# Frequency summary table
freq_summary <- summaries$by_population %>%
select(super_pop, n_samples, haplo_e2, haplo_e3, haplo_e4,
e4_carrier_rate, e2_carrier_rate)
write_csv(freq_summary, "output/frequency_summary.csv")
# Statistical test results
stats_summary <- list(
chi_square_p = stats_results$chi_square_test$p.value,
fisher_p = stats_results$fisher_test$p.value,
odds_ratios = stats_results$odds_ratios,
hardy_weinberg = stats_results$hardy_weinberg
)
# Save odds ratios
write_csv(stats_results$odds_ratios, "output/odds_ratios.csv")
# Save Hardy-Weinberg results
write_csv(stats_results$hardy_weinberg, "output/hardy_weinberg_results.csv")
# Create summary report
report <- paste0(
"APOE Analysis Report\n",
"===================\n\n",
"Total samples analyzed: ", nrow(merged_df), "\n",
"Samples with complete data: ", sum(!is.na(merged_df$super_pop)), "\n\n",
"Overall ε4 carrier rate: ", round(mean(merged_df$carrier_e4, na.rm = TRUE), 3), "\n",
"Overall ε2 carrier rate: ", round(mean(merged_df$carrier_e2, na.rm = TRUE), 3), "\n\n",
"Chi-square test p-value (ε4 carrier by superpopulation): ",
round(stats_results$chi_square_test$p.value, 6), "\n",
"Fisher's exact test p-value: ",
round(stats_results$fisher_test$p.value, 6), "\n\n",
"Hardy-Weinberg violations: ",
sum(stats_results$hardy_weinberg$hwe_violation), " populations\n"
)
writeLines(report, "output/analysis_report.txt")
return(list(
sample_table = sample_table,
frequency_summary = freq_summary,
stats_summary = stats_summary
))
}
# Main analysis function
run_apoe_analysis <- function() {
message("Starting APOE analysis workflow...")
# Step 0: Verify SNP coordinates
snp_info <- verify_snp_coordinates()
# Step 1: Download data if needed
download_1000g_data()
# Step 2: Load VCF data
vcf_file <- "data/ALL.chr19.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
vcf_subset <- load_vcf_data(vcf_file, snp_info)
# Step 3: Extract genotypes and perform QC
geno_df <- extract_genotypes(vcf_subset)
# Step 4: Build haplotypes
haplo_df <- build_haplotypes(geno_df)
# Step 5: Load metadata
metadata <- load_sample_metadata()
# Step 6: Merge data
merged_df <- merge_data(haplo_df, metadata)
# Step 7: Compute summaries
summaries <- compute_summaries(merged_df)
# Step 8: Perform statistical tests
stats_results <- perform_statistical_tests(merged_df)
# Step 9: Create visualizations
plots <- create_visualizations(summaries, stats_results)
# Step 10: Export results
results <- export_results(merged_df, summaries, stats_results)
message("Analysis complete! Results saved to output/ directory.")
return(list(
data = merged_df,
summaries = summaries,
stats = stats_results,
plots = plots,
results = results
))
}
# Run the analysis
if (!interactive()) {
results <- run_apoe_analysis()
}
# Function to download 1000 Genomes data if not present
download_1000g_data <- function() {
# URLs for 1000 Genomes Phase 3 data
vcf_url <- "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr19.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
sample_url <- "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/integrated_call_samples_v3.20130502.ALL.panel"
# Download VCF if not present
vcf_file <- "data/ALL.chr19.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
if (!file.exists(vcf_file)) {
message("Downloading chromosome 19 VCF file...")
download.file(vcf_url, vcf_file, method = "wget")
# Download tabix index
tabix_url <- paste0(vcf_url, ".tbi")
tabix_file <- paste0(vcf_file, ".tbi")
download.file(tabix_url, tabix_file, method = "wget")
}
# Download sample metadata if not present
sample_file <- "data/integrated_call_samples_v3.20130502.ALL.panel"
if (!file.exists(sample_file)) {
message("Downloading sample metadata...")
download.file(sample_url, sample_file, method = "wget")
}
}
source("apoe_analysis.R")
results <- run_apoe_analysis()
